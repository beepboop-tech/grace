{"version":3,"sources":["API.js","DrinksPage.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","s","DrinksPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","drinks","_this2","fetch","then","resp","json","setState","catch","err","console","log","drink","obj","opts","method","headers","Accept","Content-Type","body","JSON","stringify","postJSON","ref","_this3","react_default","a","createElement","className","map","item","DrinkItem","name","onClick","_onDrinkClicked","bind","key","Component","src","alt","App","DrinksPage_DrinksPage","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAAO,SAASA,EAAOC,GACrB,MAAO,0BAA4BA,WCGhBC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,IAHOR,mFAOC,IAAAS,EAAAN,KAClBO,MAAMd,EAAO,iBACVe,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GAAI,OAAIJ,EAAKK,SAAS,CAACN,OAAQK,EAAKL,QAAU,OACnDO,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,6CAGdG,IDfX,SAAkBtB,EAAGuB,GAC1B,IAAMC,EAAO,CACXC,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,IAGvB,OAAOV,MAAMd,EAAOC,GAAIwB,ICMtBQ,CAAS,eAAgB,CAAEC,IAAKX,EAAMW,MACnCnB,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GAAI,OAAII,QAAQC,IAAIL,KACzBE,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCAGrB,IAAAe,EAAA5B,KACP,OACE6B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACXhC,KAAKI,MAAMC,OAAO4B,IAAI,SAACC,GAAD,OACnBL,EAAAC,EAAAC,cAACI,EAAD,CACEC,KAAMF,EAAKE,KACXC,QAAST,EAAKU,gBAAgBC,KAAKX,EAAMM,GACzCM,IAAKN,EAAKP,gBA7BgBc,aAoCxC,SAASN,EAAUvC,GACjB,OACEiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYK,QAASzC,EAAMyC,SACxCR,EAAAC,EAAAC,cAAA,OACEW,IAAI,sEACJC,IAAI,GACJX,UAAU,eAEZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBACVpC,EAAMwC,YC9CIQ,mLAEjB,OAAOf,EAAAC,EAAAC,cAACc,EAAD,aAFsBJ,aCQbK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.88746985.chunk.js","sourcesContent":["export function apiUrl(s) {\n  return 'http://10.0.100.70:5000' + s;\n}\n\nexport function postJSON(s, obj) {\n  const opts = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(obj)\n  };\n\n  return fetch(apiUrl(s), opts);\n}\n","import React, { Component } from 'react';\nimport { apiUrl, postJSON } from './API.js'\nimport './App.css';\n\nexport default class DrinksPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drinks: []\n    }\n  }\n\n  componentDidMount() {\n    fetch(apiUrl('/api/drinks/'))\n      .then(resp => resp.json())\n      .then(json => this.setState({drinks: json.drinks || []}))\n      .catch(err => console.log(err));\n  }\n\n  _onDrinkClicked(drink) {\n    postJSON('/api/orders/', { ref: drink.ref })\n      .then(resp => resp.json())\n      .then(json => console.log(json))\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    return (\n      <ul className='DrinkList'>\n        {this.state.drinks.map((item) =>\n            <DrinkItem\n              name={item.name}\n              onClick={this._onDrinkClicked.bind(this, item)}\n              key={item.ref}\n            />)}\n      </ul>\n    );\n  }\n}\n\nfunction DrinkItem(props) {\n  return (\n    <div className='DrinkItem' onClick={props.onClick}>\n      <img\n        src='https://realhousemoms.com/wp-content/uploads/Manhattan-Drink-IG.jpg'\n        alt=''\n        className='DrinkImage'\n      />\n      <div className='DrinkTextContainer'>\n        <p className='DrinkItemText'>\n          {props.name}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport DrinksPage from './DrinksPage.js';\nimport './App.css';\n\nexport default class App extends Component {\n  render() {\n    return <DrinksPage/>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}